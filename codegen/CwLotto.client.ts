/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Duration, Uint128, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, Addr, LotteryState, Expiration, Timestamp, Uint64, LotteryStateResponse, TicketResponse } from "./CwLotto.types";
export interface CwLottoReadOnlyInterface {
  contractAddress: string;
  ticketCount: ({
    addr
  }: {
    addr: Addr;
  }) => Promise<TicketResponse>;
  lotteryState: () => Promise<LotteryStateResponse>;
}
export class CwLottoQueryClient implements CwLottoReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ticketCount = this.ticketCount.bind(this);
    this.lotteryState = this.lotteryState.bind(this);
  }

  ticketCount = async ({
    addr
  }: {
    addr: Addr;
  }): Promise<TicketResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ticket_count: {
        addr
      }
    });
  };
  lotteryState = async (): Promise<LotteryStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lottery_state: {}
    });
  };
}
export interface CwLottoInterface extends CwLottoReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buyTicket: ({
    numTickets
  }: {
    numTickets: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  executeLottery: ({
    seed
  }: {
    seed: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claimTokens: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwLottoClient extends CwLottoQueryClient implements CwLottoInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buyTicket = this.buyTicket.bind(this);
    this.executeLottery = this.executeLottery.bind(this);
    this.claimTokens = this.claimTokens.bind(this);
  }

  buyTicket = async ({
    numTickets
  }: {
    numTickets: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_ticket: {
        num_tickets: numTickets
      }
    }, fee, memo, funds);
  };
  executeLottery = async ({
    seed
  }: {
    seed: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_lottery: {
        seed
      }
    }, fee, memo, funds);
  };
  claimTokens = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_tokens: {}
    }, fee, memo, funds);
  };
}